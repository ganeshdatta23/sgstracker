.container {
  /* Define custom properties at a relevant scope, e.g., the container or :root */
  --spin-animation-duration: 4s;
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
  background-color: transparent; /* Allow global background to show through */
  text-align: center;
  font-family: var(--font-geist-sans, sans-serif); /* Use theme font if available */
  color: var(--foreground); /* Use theme foreground color for text */
}

.permissionButton {
  padding: 10px 20px;
  font-size: 16px;
  margin-top: 20px;
  cursor: pointer;
  border-radius: 5px;
  /* Apply space theme button styles */
  background-color: transparent;
  color: var(--primary-foreground, #e0e0e0); /* Fallback if var is not defined */
  border: 1px solid var(--primary-border-glow, hsla(260, 100%, 75%, 0.7)); /* Fallback */
  box-shadow: 0 0 7px -2px var(--primary-border-glow, hsla(260, 100%, 75%, 0.7)), 
              inset 0 0 8px -4px hsla(260, 100%, 75%, 0.3); /* Fallback */
  transition: border-color 0.3s ease, box-shadow 0.3s ease, color 0.3s ease;
}

.permissionButton:hover {
  border-color: var(--primary-border-glow-strong, hsla(260, 100%, 85%, 1)); /* Fallback */
  color: var(--foreground, #f5f5f5); /* Brighter text on hover, fallback */
  box-shadow: 0 0 12px -2px var(--primary-border-glow-strong, hsla(260, 100%, 85%, 1)), 
              0 0 20px -8px var(--primary-border-glow-strong, hsla(260, 100%, 85%, 1)), 
              inset 0 0 10px -5px hsla(260, 100%, 85%, 0.4); /* Fallback */
}

.errorText {
  color: var(--destructive, #ff4d4d); /* Use theme destructive color, with fallback */
  margin-top: 10px;
}

.iconContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.defaultRotatingIcon {
  font-size: 5rem; /* Adjust size as needed */
  color: var(--accent-foreground, var(--foreground, #e0e0e0)); /* Use theme accent or foreground color */
  /* Rotation will be applied by the .rotating class */
}

.rotating .defaultRotatingIcon {
  animation: spin var(--spin-animation-duration) linear infinite;
}

/* Add this rule: Rotate icon if user is moving */
.iconContainer.is-user-moving .defaultRotatingIcon {
  animation: spin var(--spin-animation-duration) linear infinite; /* Uses the same spin animation */
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
.headingDisplay {
  margin-top: 20px;
  font-size: 1.2rem;
  color: var(--muted-foreground, var(--foreground, #cccccc)); /* Use muted or regular foreground */
}

.darshanContainer {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
}

.backgroundVideo {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transform: translate(-50%, -50%);
  z-index: 1;
}

.darshanImage {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain; /* Or 'cover' depending on desired effect */
  z-index: 2; /* Image on top of video */
}

/* Optional: Camera feed styling if you enable it */
.cameraFeed {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 0; /* Behind everything */
}